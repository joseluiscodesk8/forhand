import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UsersService } from './service/users/users.service';
import { UsersController } from './controlles/users/users.controller';
import { User } from './entity/user.entity';
import { Client } from './entity/client.entity';
import { Admin } from './entity/admin.entity';

@Module({
  imports: [TypeOrmModule.forFeature([User, Client, Admin])],
  providers: [UsersService],
  controllers: [UsersController],
})
export class UsersModule {}
//////////////////////////////
import { ConflictException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from 'src/users/entity/user.entity';
import { Client } from 'src/users/entity/client.entity';
import { Admin } from 'src/users/entity/admin.entity';
import { CreateClientDto } from 'src/users/dto/create.client.dto';
import { CreateAdminDto } from 'src/users/dto/create.admin.dto';
import { UpdateClientDto } from 'src/users/dto/update.client.dto';
import { UpdateAdminDto } from 'src/users/dto/update.admin.dto';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User) private usersRepository: Repository<User>,
    @InjectRepository(Client) private clientRepository: Repository<Client>,
    @InjectRepository(Admin) private adminRepository: Repository<Admin>,
  ) {}

  getSkate(): string {
    return 'patinando todos los malditos dias';
  }

  async createClient(createClientDto: CreateClientDto): Promise<User> {
    const user = this.usersRepository.create({
      ...createClientDto,
      role: 'client',
    });

    try {
      // Guardar el usuario en la base de datos
      const savedUser = await this.usersRepository.save(user);

      // Crear y guardar el cliente vinculado al usuario
      const client = this.clientRepository.create({
        ...createClientDto,
        user: savedUser,
      });
      await this.clientRepository.save(client);

      return savedUser;
    } catch (error) {
      if (error.code === '23505') { 
        throw new ConflictException('El email ya está registrado');
      }
      throw error; 
    }
  }

  async createAdmin(createAdminDto: CreateAdminDto): Promise<User> {
    const user = this.usersRepository.create({
      ...createAdminDto,
      role: 'admin',
    });
  
    try {
      const savedUser = await this.usersRepository.save(user);
  
      const admin = this.adminRepository.create({
        ...createAdminDto,
        user: savedUser,
      });
      await this.adminRepository.save(admin);
  
      return savedUser;
    } catch (error) {
      if (error.code === '23505') { 
        throw new ConflictException('El email ya está registrado');
      }
      throw error; 
    }
  }
  

  async findAll(): Promise<User[]> {
    return this.usersRepository.find();
  }

  async findClients(): Promise<User[]> {
    return this.usersRepository.find({ where: { role: 'client' } });
  }

  async findAdmins(): Promise<User[]> {
    return this.usersRepository.find({ where: { role: 'admin' } });
  }

  async updateClient(
    id: number,
    updateClientDto: UpdateClientDto,
  ): Promise<Client> {
    const client = await this.clientRepository.findOne({ where: { id } });
    if (!client) {
      throw new Error('Client not found');
    }

    Object.assign(client, updateClientDto);
    return this.clientRepository.save(client);
  }

  async updateAdmin(
    id: number,
    updateAdminDto: UpdateAdminDto,
  ): Promise<Admin> {
    const admin = await this.adminRepository.findOne({ where: { id } });
    if (!admin) {
      throw new Error('Admin not found');
    }

    Object.assign(admin, updateAdminDto);
    return this.adminRepository.save(admin);
  }

}
/////////////
import { Controller, Get, Post, Body, Param, Put } from '@nestjs/common';
import { UsersService } from 'src/users/service/users/users.service';
import { CreateClientDto } from 'src/users/dto/create.client.dto';
import { CreateAdminDto } from 'src/users/dto/create.admin.dto';
import { UpdateClientDto } from 'src/users/dto/update.client.dto';
import { UpdateAdminDto } from 'src/users/dto/update.admin.dto';

@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Get()
  getSkate(): string {
    return this.usersService.getSkate();
  }

  @Get()
  findAll() {
    return this.usersService.findAll();
  }

  @Get('clients')
  findClients() {
    return this.usersService.findClients();
  }

  @Get('admins')
  findAdmins() {
    return this.usersService.findAdmins();
  }

  @Post('client')
  async createClient(@Body() createClientDto: CreateClientDto) {
    return this.usersService.createClient(createClientDto);
  }

  @Post('admin')
  async createAdmin(@Body() createAdminDto: CreateAdminDto) {
    return this.usersService.createAdmin(createAdminDto);
  }

  @Put('client/:id')
  updateClient(
    @Param('id') id: number,
    @Body() updateClientDto: UpdateClientDto,
  ) {
    return this.usersService.updateClient(+id, updateClientDto);
  }

  @Put('admin/:id')
  updateAdmin(@Param('id') id: number, @Body() updateAdminDto: UpdateAdminDto) {
    return this.usersService.updateAdmin(+id, updateAdminDto);
  }

}
//////////////////
quiero usar bycryp para hashear la contraseña y usar una extratejia de passwrod local